{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["sprintf","require","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","params","queryString","parse","window","location","search","state","comment","error","buttonDisabled","recaptchakey","token","titleId","title_id","type","num","time","mode","undefined","submitForm","bind","assertThisInitialized","changeComment","captchaFinish","closeModal","parent","postMessage","document","body","clientHeight","e","setState","data","FormData","append","fetch","method","ok","target","value","react_default","a","createElement","Container","CssBaseline","AppBar","color","classes","colorPrimary","position","Typography","variant","align","Grid","style","display","TextField","marginTop","autoFocus","multiline","fullWidth","helperText","required","rows","placeholder","id","onChange","es","sitekey","size","container","justify","Button","disabled","onClick","React","Component","Boolean","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yYAYIA,EAAUC,EAAQ,IAAcD,QAyIrBE,cAjIX,SAAAA,EAAYC,GAAO,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,GACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,IACN,IAAIQ,EAASC,IAAYC,MAAMC,OAAOC,SAASC,QAFhC,OAGfZ,EAAKa,MAAQ,CACTC,QAAS,GACTC,OAAO,EACPC,gBAAgB,EAChBC,aAAc,2CACdC,MAAO,GACPC,QAASZ,EAAOa,SAChBC,KAAMd,EAAOc,KACbC,IAAKf,EAAOe,IACZC,KAAMhB,EAAOgB,KACbC,KAAM,aAEgBC,GAAtBzB,EAAKa,MAAMM,cAA0CM,GAAlBzB,EAAKa,MAAMS,UAAuCG,GAAnBzB,EAAKa,MAAMQ,WAAwCI,GAAnBzB,EAAKa,MAAMU,OAC7GvB,EAAKa,MAAMW,KAAO,SAEtBxB,EAAK0B,WAAa1B,EAAK0B,WAAWC,KAAhB1B,OAAA2B,EAAA,EAAA3B,CAAAD,IAClBA,EAAK6B,cAAgB7B,EAAK6B,cAAcF,KAAnB1B,OAAA2B,EAAA,EAAA3B,CAAAD,IACrBA,EAAK8B,cAAgB9B,EAAK8B,cAAcH,KAAnB1B,OAAA2B,EAAA,EAAA3B,CAAAD,IACrBA,EAAK+B,WAAa/B,EAAK+B,WAAWJ,KAAhB1B,OAAA2B,EAAA,EAAA3B,CAAAD,IArBHA,mFAyBfU,OAAOsB,OAAOC,YAAY,WAAWC,SAASC,KAAKC,aAAa,gFAGnDC,4EACc,KAAvBlC,KAAKU,MAAMC,wBACXX,KAAKmC,SAAS,CAACvB,OAAO,mCAEIU,GAAtBtB,KAAKU,MAAMM,cAA0CM,GAAlBtB,KAAKU,MAAMS,UAAuCG,GAAnBtB,KAAKU,MAAMQ,WAAwCI,GAAnBtB,KAAKU,MAAMU,qBACjHpB,KAAKmC,SAAS,CAACd,KAAK,wCAGhBe,EAAK,IAAIC,UACRC,OAAO,QAAStC,KAAKU,MAAMK,OAChCqB,EAAKE,OAAO,UAAWtC,KAAKU,MAAMC,SAClCyB,EAAKE,OAAO,OAAQtC,KAAKU,MAAMU,gBACdmB,MAAM9C,EA7CjB,wDA6CoCO,KAAKU,MAAMM,QAAShB,KAAKU,MAAMQ,KAAMlB,KAAKU,MAAMS,KAAM,CAC5FqB,OAAQ,OACRR,KAAMI,mBAEDK,GACLzC,KAAKmC,SAAS,CAACd,KAAK,YAEpBrB,KAAKmC,SAAS,CAACd,KAAK,yJAMlBa,GACVlC,KAAKmC,SAAS,CAACxB,QAASuB,EAAEQ,OAAOC,MAAO/B,OAAO,EAAOC,eAAsC,KAArBb,KAAKU,MAAMK,8CAGxEmB,GACVlC,KAAKmC,SAAS,CAACpB,MAAOmB,EAAGrB,eAAwC,KAAvBb,KAAKU,MAAMC,6CAG9CuB,GACP3B,OAAOsB,OAAOC,YAAY,QAAQ,sCAIlC,OACIc,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACIH,EAAAC,EAAAC,cAACE,EAAA,EAAD,MACAJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAAS,CAACC,aAAc,eAAgBC,SAAS,UACrET,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAYC,QAAQ,KAAKC,MAAM,UAA/B,6GAEJZ,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAMC,MAAO,CAACC,QAA6B,SAAlB3D,KAAKU,MAAMW,KAAe,KAAK,SACpDuB,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAYC,QAAQ,QAAQC,MAAM,UAAlC,oPAEAZ,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAYC,QAAQ,QAAQC,MAAM,UAAlC,+dAEAZ,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAYC,QAAQ,QAAQC,MAAM,UAAlC,uQAEAZ,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAWF,MAAO,CAACG,UAAa,QAASC,WAAW,EAAMC,WAAW,EAAMC,WAAS,EACzEC,WAAW,mIAA0BC,UAAQ,EAACC,KAAK,IAAIZ,QAAQ,WAC/Da,YAAY,qEAAcC,GAAG,gBAAgB1B,MAAO3C,KAAKU,MAAMC,QAC/D2D,SAAUtE,KAAK0B,cAAed,MAAOZ,KAAKU,MAAME,QAG3DgC,EAAAC,EAAAC,cAACyB,EAAA,EAAD,CAAWC,QAASxE,KAAKU,MAAMI,aAAc2D,KAAK,SAASf,MAAO,CAACG,UAAa,QACrES,SAAUtE,KAAK2B,gBAC1BiB,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAMiB,WAAS,EAACC,QAAQ,UACpB/B,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CAAQH,KAAK,QAAQlB,QAAQ,YAAYG,MAAO,CAACG,UAAa,QACtDgB,SAAU7E,KAAKU,MAAMG,eAAgBiE,QAAS9E,KAAKuB,YAD3D,4DAMRqB,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAMC,MAAO,CAACC,QAA6B,UAAlB3D,KAAKU,MAAMW,KAAgB,KAAK,SACrDuB,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAYC,QAAQ,QAAQC,MAAM,SAASE,MAAO,CAACG,UAAa,SAAhE,2IAEAjB,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAMiB,WAAS,EAACC,QAAQ,UACpB/B,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CAAQH,KAAK,QAAQlB,QAAQ,YAAYG,MAAO,CAACG,UAAa,QACtDiB,QAAS9E,KAAK4B,YADtB,gDAKRgB,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAMC,MAAO,CAACC,QAA6B,YAAlB3D,KAAKU,MAAMW,KAAkB,KAAK,SACvDuB,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAYC,QAAQ,QAAQC,MAAM,SAASE,MAAO,CAACG,UAAa,SAAhE,kKACAjB,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAMiB,WAAS,EAACC,QAAQ,UACpB/B,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CAAQH,KAAK,QAAQlB,QAAQ,YAAYG,MAAO,CAACG,UAAa,QACtDiB,QAAS9E,KAAK4B,YADtB,gDAKRgB,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAMC,MAAO,CAACC,QAA6B,eAAlB3D,KAAKU,MAAMW,KAAqB,KAAK,SAC1DuB,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAYC,QAAQ,QAAQC,MAAM,SAASE,MAAO,CAACG,UAAa,SAAhE,mKACAjB,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAMiB,WAAS,EAACC,QAAQ,UACpB/B,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CAAQH,KAAK,QAAQlB,QAAQ,YAAYG,MAAO,CAACG,UAAa,QACtDiB,QAAS9E,KAAK4B,YADtB,wDArHNmD,IAAMC,WCLJC,QACW,cAA7B1E,OAAOC,SAAS0E,UAEe,UAA7B3E,OAAOC,SAAS0E,UAEhB3E,OAAOC,SAAS0E,SAASC,MACvB,2DCZNC,IAASC,OAAOzC,EAAAC,EAAAC,cAACwC,EAAD,MAASvD,SAASwD,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1b165467.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport 'typeface-roboto';\nimport Container from '@material-ui/core/Container';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport AppBar from '@material-ui/core/AppBar';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport ReCAPTCHA from \"react-google-recaptcha\";\nimport queryString from 'query-string';\nvar sprintf = require('sprintf-js').sprintf;\n\n\nconst reportUrl = 'https://api.sovetromantica.com/api/v1/report/%s/%s/%s';\n\nclass App extends React.Component {\n\n\n    constructor(props) {\n        super(props);\n        let params = queryString.parse(window.location.search);\n        this.state = {\n            comment: '',\n            error: false,\n            buttonDisabled: true,\n            recaptchakey: '6LchoqgUAAAAADbhfoFRoONyXZ01UBcfY4-gYeGm',\n            token: '',\n            titleId: params.title_id,\n            type: params.type,\n            num: params.num,\n            time: params.time,\n            mode: 'form',\n        };\n        if (this.state.titleId == undefined || this.state.num == undefined || this.state.type == undefined || this.state.time == undefined) {\n            this.state.mode = 'error';\n        }\n        this.submitForm = this.submitForm.bind(this);\n        this.changeComment = this.changeComment.bind(this);\n        this.captchaFinish = this.captchaFinish.bind(this);\n        this.closeModal = this.closeModal.bind(this);\n    }\n\n    componentDidMount() {\n        window.parent.postMessage(\"resize::\"+document.body.clientHeight,\"*\");\n    }\n\n    async submitForm(e) {\n        if (this.state.comment === '') {\n            this.setState({error: true});\n        }\n        else if(this.state.titleId == undefined || this.state.num == undefined || this.state.type == undefined || this.state.time == undefined){\n            this.setState({mode:'error'});\n        }\n        else {\n            let data=new FormData();\n            data.append(\"token\", this.state.token);\n            data.append(\"comment\", this.state.comment);\n            data.append(\"time\", this.state.time);\n            let resp = await fetch(sprintf(reportUrl, this.state.titleId, this.state.type, this.state.num), {\n                method: 'POST',\n                body: data\n            });\n            if (resp.ok){\n                this.setState({mode:\"success\"});\n            } else {\n                this.setState({mode:\"error_send\"})\n            }\n\n        }\n    }\n\n    changeComment(e) {\n        this.setState({comment: e.target.value, error: false, buttonDisabled: (this.state.token === '')});\n    }\n\n    captchaFinish(e) {\n        this.setState({token: e, buttonDisabled: (this.state.comment === '')});\n    }\n\n    closeModal(e){\n        window.parent.postMessage(\"close\",\"*\");\n    }\n\n    render() {\n        return (\n            <Container>\n                <CssBaseline/>\n                <AppBar color=\"primary\" classes={{colorPrimary: \"main_header\"}} position=\"sticky\">\n                    <Typography variant=\"h5\" align=\"center\">Сообщение об ошибке</Typography>\n                </AppBar>\n                <Grid style={{\"display\":(this.state.mode==='form')?null:'none'}}>\n                    <Typography variant=\"body1\" align=\"center\">Спасибо за вашу внимательность при\n                        просмотре!</Typography>\n                    <Typography variant=\"body1\" align=\"center\">Просьба указывать только ошибки связанные с\n                        переводом/озвучкой, а не технические проблемы!</Typography>\n                    <Typography variant=\"body1\" align=\"center\">Мы постараемся исправить ошибку как можно\n                        скорее!</Typography>\n                    <TextField style={{\"marginTop\": \"15px\"}} autoFocus={true} multiline={true} fullWidth\n                               helperText=\"Введите описание ошибки\" required rows=\"3\" variant=\"outlined\"\n                               placeholder=\"Комментарий\" id=\"comment_field\" value={this.state.comment}\n                               onChange={this.changeComment} error={this.state.error}>\n\n                    </TextField>\n                    <ReCAPTCHA sitekey={this.state.recaptchakey} size=\"normal\" style={{\"marginTop\": \"15px\"}}\n                               onChange={this.captchaFinish}/>\n                    <Grid container justify=\"center\">\n                        <Button size=\"large\" variant=\"contained\" style={{\"marginTop\": \"15px\"}}\n                                disabled={this.state.buttonDisabled} onClick={this.submitForm}>Отправить</Button>\n                    </Grid>\n                </Grid>\n\n\n                <Grid style={{\"display\":(this.state.mode==='error')?null:'none'}}>\n                    <Typography variant=\"body1\" align=\"center\" style={{\"marginTop\": \"15px\"}}>Неверные параметры\n                        формы.</Typography>\n                    <Grid container justify=\"center\">\n                        <Button size=\"large\" variant=\"contained\" style={{\"marginTop\": \"15px\"}}\n                                onClick={this.closeModal}>Закрыть</Button>\n                    </Grid>\n                </Grid>\n\n                <Grid style={{\"display\":(this.state.mode==='success')?null:'none'}}>\n                    <Typography variant=\"body1\" align=\"center\" style={{\"marginTop\": \"15px\"}}>Сообщение успешно отправлено</Typography>\n                    <Grid container justify=\"center\">\n                        <Button size=\"large\" variant=\"contained\" style={{\"marginTop\": \"15px\"}}\n                                onClick={this.closeModal}>Закрыть</Button>\n                    </Grid>\n                </Grid>\n\n                <Grid style={{\"display\":(this.state.mode==='error_send')?null:'none'}}>\n                    <Typography variant=\"body1\" align=\"center\" style={{\"marginTop\": \"15px\"}}>Произошла ошибка при отправке</Typography>\n                    <Grid container justify=\"center\">\n                        <Button size=\"large\" variant=\"contained\" style={{\"marginTop\": \"15px\"}}\n                                onClick={this.closeModal}>Закрыть</Button>\n                    </Grid>\n                </Grid>\n\n\n\n\n            </Container>\n\n        );\n    }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}