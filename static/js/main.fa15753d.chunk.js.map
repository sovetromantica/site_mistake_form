{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["sprintf","require","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","params","queryString","parse","window","location","search","state","comment","error","buttonDisabled","recaptchakey","token","titleId","title_id","type","num","time","uuid","mode","sending","videoUrl","video_url","fastMode","undefined","submitForm","bind","assertThisInitialized","changeComment","captchaFinish","closeModal","handleMessage","handleKeyPress","setTimeout","e","parent","postMessage","document","body","clientHeight","addEventListener","data","indexOf","removeEventListener","setState","test","prevProps","prevState","snapshot","recaptcha","execute","target","value","trim","ctrlKey","charCode","FormData","append","getResponse","fetch","method","resp","ok","_this2","react_default","a","createElement","Container","CssBaseline","AppBar","color","classes","colorPrimary","position","Typography","variant","align","Grid","style","display","TextField","marginTop","autoFocus","multiline","fullWidth","helperText","required","rows","placeholder","id","onChange","onKeyPress","FormHelperText","marginLeft","container","justify","Button","size","marginBottom","width","disabled","onClick","CircularProgress","react_google_invisible_recaptcha_default","sitekey","onResolved","ref","badge","fontSize","height","href","React","Component","Boolean","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fa15753d.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport 'typeface-roboto';\nimport Container from '@material-ui/core/Container';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport AppBar from '@material-ui/core/AppBar';\nimport TextField from '@material-ui/core/TextField';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Recaptcha from \"react-google-invisible-recaptcha\";\nimport queryString from 'query-string';\n\nvar sprintf = require('sprintf-js').sprintf;\n\n\nconst reportUrl = 'https://api.sovetromantica.com/api/v1/report/%s/%s/%s';\n\nclass App extends React.Component {\n\n\n    constructor(props) {\n        super(props);\n        let params = queryString.parse(window.location.search);\n        this.state = {\n            comment: '',\n            error: false,\n            buttonDisabled: true,\n            recaptchakey: '6LeKwesUAAAAAET1JQcHgDg4UChhr8zPBBT0Xx0N',\n            token: '',\n            titleId: params.title_id,\n            type: params.type,\n            num: params.num,\n            time: params.time,\n            uuid: params.uuid,\n            mode: 'form',\n            sending: false,\n            videoUrl:params.video_url,\n            fastMode: false\n        };\n        if (this.state.titleId == undefined || this.state.num == undefined || this.state.type == undefined || this.state.time == undefined) {\n            this.state.mode = 'error';\n        }\n        this.submitForm = this.submitForm.bind(this);\n        this.changeComment = this.changeComment.bind(this);\n        this.captchaFinish = this.captchaFinish.bind(this);\n        this.closeModal = this.closeModal.bind(this);\n        this.handleMessage = this.handleMessage.bind(this);\n        this.handleKeyPress = this.handleKeyPress.bind(this)\n    }\n\n    componentDidMount() {\n        setTimeout((e) => window.parent.postMessage(\"resize::\" + document.body.clientHeight, \"*\"), 300);\n        window.addEventListener('message', this.handleMessage);\n        window.parent.postMessage('reqimg','*');\n    }\n\n    async handleMessage(e) {\n        if(e.data.indexOf('blob')===0) {\n            window.removeEventListener('message', this.handleMessage);\n            this.setState({test:e.data});\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        window.parent.postMessage(\"resize::\" + document.body.clientHeight, \"*\")\n    }\n\n    async submitForm(e) {\n        this.recaptcha.execute();\n    }\n\n\n    changeComment(e) {\n        this.setState({\n            comment: e.target.value,\n            error: false,\n            buttonDisabled: (e.target.value.trim() === '')\n        });\n    }\n\n    handleKeyPress(e){\n        if(e.ctrlKey && e.charCode==13) {\n            if(!this.state.buttonDisabled){\n                this.setState({\n                    fastMode: true\n                });\n                this.submitForm()\n            }\n        }\n\n    }\n\n    async captchaFinish(e) {\n\n        if (!this.state.sending) {\n            if (this.state.comment === '') {\n                this.setState({error: true});\n            } else if (this.state.titleId == undefined || this.state.num == undefined || this.state.type == undefined || this.state.time == undefined) {\n                this.setState({mode: 'error'});\n            } else {\n                this.setState({sending: true})\n                let data = new FormData();\n                data.append(\"token\", this.recaptcha.getResponse());\n                data.append(\"comment\", this.state.comment);\n                data.append(\"time\", this.state.time);\n                data.append('uuid', this.state.uuid);\n                data.append('video_url', this.state.videoUrl);\n                let resp = await fetch(sprintf(reportUrl, this.state.titleId, this.state.type, this.state.num), {\n                    method: 'POST',\n                    body: data\n                });\n                if(this.state.fastMode){\n                    this.closeModal();\n                } else {\n                    if (resp.ok) {\n                        this.setState({mode: \"success\"});\n                    } else {\n                        this.setState({mode: \"error_send\"})\n                    }\n                }\n\n\n            }\n        }\n    }\n\n    closeModal(e) {\n        window.parent.postMessage(\"close\", \"*\");\n    }\n\n    render() {\n        return (\n            <Container>\n                <CssBaseline/>\n                <AppBar color=\"primary\" classes={{colorPrimary: \"main_header\"}} position=\"sticky\">\n                    <Typography variant=\"h5\" align=\"center\">Сообщение об ошибке</Typography>\n                </AppBar>\n                <Grid style={{\"display\": (this.state.mode === 'form') ? null : 'none'}}>\n                    <Typography variant=\"body1\" align=\"center\">Нашли ошибку в субтитрах или озвучке?</Typography>\n                    <Typography variant=\"body1\" align=\"center\">Опишите её поподробней!</Typography>\n                    <Typography variant=\"body1\" align=\"center\">P.S. В сообщении будет передан текущий таймкод.</Typography>\n                    <TextField style={{\"marginTop\": \"15px\"}} autoFocus={true} multiline={true} fullWidth\n                               helperText=\"Введите описание ошибки (обязательное поле)\" required rows=\"3\"\n                               variant=\"outlined\"\n                               placeholder=\"Комментарий\" id=\"comment_field\" value={this.state.comment}\n                               onChange={this.changeComment} error={this.state.error}\n                                onKeyPress={this.handleKeyPress}\n                    >\n\n                    </TextField>\n                    <FormHelperText style={{\"marginLeft\":\"14px\"}}>Для быстрой отправки нажмите Ctrl-Enter</FormHelperText>\n\n                    <Grid container justify=\"space-around\">\n                        <Button size=\"large\" variant=\"contained\"\n                                style={{\"marginTop\": \"15px\", \"marginBottom\": \"15px\",\"width\":\"130px\"}}\n                                disabled={this.state.buttonDisabled || this.state.sending}\n                                onClick={this.submitForm}>\n                            {this.state.sending ? <CircularProgress size=\"20px\"/> : <Typography>Отправить</Typography>}\n                        </Button>\n\n                        <Button size=\"large\" variant=\"contained\" style={{\"marginTop\": \"15px\", \"marginBottom\": \"15px\",\"width\":\"130px\"}}\n                                onClick={this.closeModal}>Закрыть</Button>\n                    </Grid>\n                    <Recaptcha sitekey={this.state.recaptchakey} size=\"normal\"\n                               onResolved={this.captchaFinish} ref={ ref => this.recaptcha = ref } badge={\"inline\"} />\n                    <Typography variant={\"caption\"} style={{\"color\":\"rgba(0, 0, 0, 0.54)\",\"marginLeft\":\"12px\",\"fontSize\":\"0.6rem\",\"height\":\"25px\",\"display\":\"inline-block\"}}>Защита от спама reCAPTCHA <a href={\"https://policies.google.com/privacy\"} style={{\"color\":\"rgba(0, 0, 0, 0.54)\"}}>Конфиденциальность</a> и <a href={\"https://policies.google.com/terms\"} style={{\"color\":\"rgba(0, 0, 0, 0.54)\"}}>Условия использования</a></Typography>\n                </Grid>\n\n\n                <Grid style={{\"display\": (this.state.mode === 'error') ? null : 'none'}}>\n                    <Typography variant=\"body1\" align=\"center\" style={{\"marginTop\": \"15px\"}}>Неверные параметры\n                        формы.</Typography>\n                    <Grid container justify=\"center\">\n                        <Button size=\"large\" variant=\"contained\" style={{\"marginTop\": \"15px\", \"marginBottom\": \"15px\"}}\n                                onClick={this.closeModal}>Закрыть</Button>\n                    </Grid>\n                </Grid>\n\n                <Grid style={{\"display\": (this.state.mode === 'success') ? null : 'none'}}>\n                    <Typography variant=\"body1\" align=\"center\" style={{\"marginTop\": \"15px\"}}>Спасибо за\n                        внимательность!</Typography>\n                    <Grid container justify=\"center\">\n                        <Button size=\"large\" variant=\"contained\" style={{\"marginTop\": \"15px\", \"marginBottom\": \"15px\"}}\n                                onClick={this.closeModal}>Закрыть</Button>\n                    </Grid>\n                </Grid>\n\n                <Grid style={{\"display\": (this.state.mode === 'error_send') ? null : 'none'}}>\n                    <Typography variant=\"body1\" align=\"center\" style={{\"marginTop\": \"15px\"}}>Произошла ошибка при\n                        отправке</Typography>\n                    <Grid container justify=\"center\">\n                        <Button size=\"large\" variant=\"contained\" style={{\"marginTop\": \"15px\", \"marginBottom\": \"15px\"}}\n                                onClick={this.closeModal}>Закрыть</Button>\n                    </Grid>\n                </Grid>\n\n\n            </Container>\n\n        );\n    }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}